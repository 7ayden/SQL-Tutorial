h2. A Gentle Introduction to SQL using SQLite

SQL or Structured Query language is the language used to communicate with relational databases. What are relational databases? Well, most of the popular database systems you may know, such as MS Access, MySQL or SQLite, are all relational. That is, they all use a relational model, which, it turns out, can be described much like a spreadsheet: 
* Data is organized into tables (relations) that represent a collection of similar objects (e.g. contributors). 
* The columns of the table represent the attributes that members of the collection share (last name, home address, amount of contribution). 
* Each row in the table represents an individual member of the collection (one contributor). 
* And the values in the row represent the attributes of that individual (Smith, 1228 Laurel St., $250).

Much of the power of a relational database lies in the ability to query these relations, both within a table (give me all contributors who donated at least $500 and who live in Wyoming) and among tables (from the contributors, judges and litigants tables, give me all contributors who donated at least $1000 to Judge Crawford and who also had legal cases over which Judge Crawford presided). SQL is the powerful and rather minimalist language we use to ask such questions of our data in a relational database. How minimalist is SQL? The basic vocabulary comes down to a few main verbs:

<pre><code>SELECT
INSERT
UPDATE
DELETE</code></pre>

I imagine you can guess what each of those verbs does, even if you've never written a database query.
To create and change tables in the database, there are a few other verbs to use:
<pre><code>CREATE
DROP
ALTER
</code></pre>
Those are the keywords for almost everything you need to do. The language also includes a number of modifiers that help specify the action of the verbs, but the core list comes down to a couple dozen words. These basic keywords are common across pretty much all relational databases. A specific database management system (Access, MySQL or SQLite) may add its own extensions to the common keywords, but the lion's share of the work is done with this handful of words, and they're basically the same across database applications. 

By combining these simple keywords, you can create remarkably complex and specific queries. And the basic syntax still reads fairly clearly:
<pre><code>SELECT last_name FROM contributors WHERE state = 'WY'; </code></pre>
The SQL query above reads pretty much like the English sentence for the same request: "Select the last name from the contributors table where the contributor's state is WY." If you're using a graphical interface such as a datagrid, that interface is simply constructing queries like these behind the scenes. So, why not take command of your queries and write them yourself?

A couple of things off the bat: 
* SQL is not case-sensitive. So capitalizing SELECT in the statement above is optional. Using all caps for keywords is considered good form, though, because it helps distinguish keywords from table names or other non-keywords.
* The statement ends with a semi-colon. This is the standard way of ending a statement in SQL. Some systems enforce this convention.

So, let's dive in. For this tutorial, we will be using SQLite, a free and open source database manager that's lightweight and portable.

h3. Installing SQLite

If you have the Firefox browser, you have SQLite. Firefox uses SQLite to manage its own data, so when you install Firefox, it brings SQLite along with it. (A growing number of software packages are using SQLite in this way.) So, if you don't have Firefox installed, "install it now":http://www.mozilla.com/en-US/firefox/personal.html

h3. Install the SQLite Manager Firefox Add-on

To create our own databases using Firefox's SQLite installation, we'll use the free SQLite Manager add-on.
Go to "this page":https://addons.mozilla.org/en-US/firefox/addon/5817 and click "Add to Firefox".
Click "Install Now." (You may need to upgrade Firefox if you're using an older version.)
Restart Firefox.
In the Tools menu, you should find the SQLite Manager: 

!http://github.com/tthibo/SQL-Tutorial/raw/master/tool_menu.jpg!

Clicking that item should bring up the manager. It's a simple interface for creating and interacting with your SQLite databases.
!http://github.com/tthibo/SQL-Tutorial/raw/master/sqlite_manager_empty.png!

h3. Creating the First Database

Mousing over each of the icons at the top of the SQLite Manager tool will show what the icon does.
To create a database, simply click on the icon for "New Database" !http://github.com/tthibo/SQL-Tutorial/raw/master/new_database.png!
Name the database "test" and save it anywhere you like (the desktop will work, or your documents folder).

h3. Creating a Table

Click the "New Table" icon (!http://github.com/tthibo/SQL-Tutorial/raw/master/new_table.png!), and you'll get a form allowing you to create a new table. 
To create a table, we have to define the attributes or columns it contains. For each column, we define the
datatype of the data it will contain. Define the columns as follows:

!http://github.com/tthibo/SQL-Tutorial/raw/master/create_table.png!

* Name the table "contributors."
* The id field will be a unique identifier for each contributor (and therefore will be the "Primary Key" for the row). It will be an integer that will automatically increment with each row we add (so each new row will have a new id), and it cannot be null or empty (because we need it as the unique identifier).
* The next three columns will all contain text strings of undetermined lengths (last names, for example, come in all kinds of lengths), so we'll use the VARCHAR or "variable character" datatype.  
* For the state and zip columns, if we know that the number of characters will always be the same (for example, 2 for state postal abbreviation), we could use the CHAR character type, rather than VARCHAR. The pros and cons of choosing between the two vary among database management systems. SQLite doesn't really distinguish between the two, so we'll just use VARCHAR to keep things simple.

By the way, It may seem strange that the zip column uses a VARCHAR datatype, but remember that some zips start with a 0 (00501 is in NY). So, we want to treat this column as a string of text, rather than as a number (which would be 501).

Click OK, and you will see a dialogue box with the full SQL statement that the manager will execute on your database:
<pre><code>CREATE  TABLE "main"."contributors" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "last_name" VARCHAR, "first_name" VARCHAR, "city" VARCHAR, "state" VARCHAR, "zip" VARCHAR, "amount" INTEGER)</code></pre>

The syntax should be fairly clear, since it just reflects the choices we made in the form. It's creating a table in the "main" database (not in the separate "temporary" space) called "contributors" with the fields and data types we've defined. Click OK to create the table.

You should now see a "contributors" table in the Tables list on the left panel of the manager. Clicking the arrow icon beside the table will show you the column list for the table.

h3. Inserting Data

Now that we have a table in the database, we can start inserting data. This task is accomplished with (oddly enough) using INSERT.

Click the "Execute SQL" tab (it's in the second menu row, under the icons): !http://github.com/tthibo/SQL-Tutorial/raw/master/execute_sql.png!

You'll see that the "Enter SQL" box is already pre-populated with a SELECT statement. Since we don't have anything in the table yet, this won't really help. So,
delete the "SELECT * from tablename" statement, and replace it with the following:

<pre><code>INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Buffet', 'Warren', 'Omaha', 'Nebraska', '68101', 1500);</pre></code>

This is a little more obscure than the CREATE or SELECT syntax, but it still be fairly clear. To insert a row in the table, we execute the INSERT INTO statement with a table name, a list of columns to populate, and the VALUES for each of those columns. The order of the columns in the column list must match the order of values in the values list. 

It's very important to surround text values with single quotation marks. Two things to note:
* SQL uses single quotation marks around text strings, never double.
* The quotation marks indicate to SQL that this is a literal string (the word 'Buffet'), rather than a column name or other special usage. 
* The commas between values are place outside of the quote marks, not inside. 

Notice that we didn't insert a value for id. Because we set that column to AUTOINCREMENT, SQLite will populate the id with the next integer in the sequence. So, we don't need to worry about choosing unique ids; SQLite takes care of it.

Finally, we didn't include dollar signs or commas in the "amount" column. We created the "amount" column as an integer, so we should only insert integers there. (Different database management systems will react differently if you try to insert non-numeric characters in an integer column; it's best to avoid doing so.)

If you haven't done so already, click the "Run SQL" button. The "Last Error" field should show "not an error." Success! You've added data.

Just so we'll have some data to play with, let's execute a couple of other INSERT statements:
<pre><code>
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Winfrey', 'Oprah', 'Chicago', 'IL', '60601', 500);
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Chambers', 'Anne Cox', 'Atlanta', 'GA', '30301', 200);
INSERT INTO contributors (last_name, first_name, city, state, zip, amount) VALUES ('Cathy', 'S. Truett', 'Atlanta', 'GA', '30301', 1200);
</pre></code>
You can paste these three lines into the 'Enter SQL' text box together. The semi-colons indicate the end of each statement.
Click "Run SQL" 

h3. Selecting Data
Now that we have a small data set to use, let's start querying it.
Type the following in the Enter SQL text box:
<pre><code>SELECT * FROM contributors;</code></pre>
And click the "Run SQL" button.

You should see a nice grid display of all contributors you've added. The '*' character is a common wildcard. In this SELECT, it is used to indicate all columns.
So, we have selected all columns from all rows

Now let's define which columns of data we want to return by providing a comma-separated list of column names to SELECT:
<pre><code>SELECT city, state FROM contributors;</code></pre>
Clicking "Run SQL" should give you a two-column table of cities and states.







h2. Further References

http://www.firstsql.com/tutor.htm
http://www.sqlite.org/lang_keywords.html

SQL Data Statements:
  SELECT
  INSERT
  UPDATE
  DELETE

SQL Schema Statements
  CREATE TABLE
  CREATE VIEW
  DROP TABLE
  DROP VIEW
  GRANT
  REVOKE
  ALTER

SQL-Transaction
  COMMIT 
  ROLLBACK

Modifiers
  WHERE
  FROM
  DISTINCT
  IS NULL (IS NOT NULL)
  ORDER BY  (ASC, DESC)
  GROUP BY
  HAVING
  AND & OR
  JOIN
  UNION
  IN
  INTO
  BETWEEN
  LIKE
  COUNT
  MAX
  MIN
  SUM
  LIKE
  AVERAGE
  JOIN
  ALIAS (AS?)
  OUTER JOIN
  CONCAT
  SUBSTRING
 TRIM
